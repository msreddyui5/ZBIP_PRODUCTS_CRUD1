/*global location*/
sap.ui.define([
	"bip/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/routing/History",
	"bip/model/formatter",
	"sap/m/Dialog",
	"sap/ui/unified/FileUploader",
	"sap/ui/core/util/Export",
	"sap/ui/core/util/ExportTypeCSV",
], function(BaseController, JSONModel, History, formatter, Dialog, FileUploader, Export, ExportTypeCSV) {
	"use strict";
	return BaseController.extend("bip.controller.Object", {
		formatter: formatter,
		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */
		/**
		 * Called when the worklist controller is instantiated.
		 * @public
		 */
		onInit: function() {
			// Model used to manipulate control states. The chosen values make sure,
			// detail page is busy indication immediately so there is no break in
			// between the busy indication for loading the view's meta data
			var iOriginalBusyDelay, oViewModel = new JSONModel({
				busy: true,
				delay: 0,
				toppings: []
			});
			this.getRouter().getRoute("object").attachPatternMatched(this._onObjectMatched, this);
			// Store original busy indicator delay, so it can be restored later on
			iOriginalBusyDelay = this.getView().getBusyIndicatorDelay();
			this.setModel(oViewModel, "objectView");
			this.getOwnerComponent().getModel().metadataLoaded().then(function() {
				// Restore original busy indicator delay for the object view
				oViewModel.setProperty("/delay", iOriginalBusyDelay);
			});
		},
		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */
		/**
		 * Event handler when the share in JAM button has been clicked
		 * @public
		 */
		onShareInJamPress: function() {
			var oViewModel = this.getModel("objectView"),
				oShareDialog = sap.ui.getCore().createComponent({
					name: "sap.collaboration.components.fiori.sharing.dialog",
					settings: {
						object: {
							id: location.href,
							share: oViewModel.getProperty("/shareOnJamTitle")
						}
					}
				});
			oShareDialog.open();
		},
		/**
		 * Event handler  for navigating back.
		 * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history
		 * If not, it will replace the current entry of the browser history with the worklist route.
		 * @public
		 */
		onNavBack: function() {
			var sPreviousHash = History.getInstance().getPreviousHash(),
				oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");
			if (sPreviousHash !== undefined || !oCrossAppNavigator.isInitialNavigation()) {
				history.go(-1);
			} else {
				this.getRouter().navTo("worklist", {}, true);
			}
		},
		/* =========================================================== */
		/* internal methods                                            */
		/* =========================================================== */
		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'
		 * @private
		 */
		_onObjectMatched: function(oEvent) {
			var sObjectId = oEvent.getParameter("arguments").objectId;
			this.productId = sObjectId;
			this.getModel().metadataLoaded().then(function() {
				var sObjectPath = this.getModel().createKey("ProductsSet", {
					ProductId: sObjectId
				});
				this._bindView("/" + sObjectPath);
			}.bind(this));
		},
		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {string} sObjectPath path to the object to be bound
		 * @private
		 */

		_bindView: function(sObjectPath) {
			var oViewModel = this.getModel("objectView"),
				oDataModel = this.getModel();
			this.getView().bindElement({
				path: sObjectPath,
				events: {
					change: this._onBindingChange.bind(this),
					dataRequested: function() {
						oDataModel.metadataLoaded().then(function() {
							// Busy indicator on view should only be set if metadata is loaded,
							// otherwise there may be two busy indications next to each other on the
							// screen. This happens because route matched handler already calls '_bindView'
							// while metadata is loaded.
							oViewModel.setProperty("/busy", true);
						});
					},
					dataReceived: function() {
						oViewModel.setProperty("/busy", false);
					}
				}
			});
		},
		/**
		 *@memberOf bip.controller.Object
		 */
		onAddExcelData: function() {
			//This code was generated by the layout editor.
			var that = this;
			//Step 1: Create a popup object as a global variable
			if (this.fixedDialog === undefined) {
				this.fixedDialog = new Dialog({
					title: "Choose CSV File For Upload",
					beginButton: new sap.m.Button({
						text: "Upload",
						press: function(oEvent) {
							// TO DO: get the object of our video player which live camera stream is running
							//take the image object out of it and set to main page using global variable

							that.fixedDialog.close();
						}
					}),
					content: [
						new FileUploader("excelUploader")
					],
					endButton: new sap.m.Button({
						text: "Cancel",
						press: function() {
							that.fixedDialog.close();
						}
					})
				});

				this.getView().addDependent(this.fixedDialog);
				this.fixedDialog.attachBeforeClose(this.setDataToJsonFromExcel, this);
			}

			//Step 2: Launch the popup
			this.fixedDialog.open();
		},
		setDataToJsonFromExcel: function(oEvent) {
			var oUploader = oEvent.getSource().getContent()[0];
			var domRef = oUploader.getFocusDomRef();
			if (domRef.files.length === 0) {
				return;
			}
			var file = domRef.files[0];
			var that = this;
			this.fileName = file.name;
			this.fileType = file.type;
			var reader = new FileReader();
			reader.onload = function(e) {
				//get an access to the content of the file
				debugger;
				var arrCSV = e.currentTarget.result.match(/[\w .]+(?=,?)/g);
				var noOfCol = 3;
				var headerRow = arrCSV.splice(0, noOfCol);
				var data = [];
				while (arrCSV.length > 0) {
					var record = {};
					var excelData = arrCSV.splice(0, noOfCol);
					for (var i = 0; i < excelData.length; i++) {
						record[headerRow[i]] = excelData[i].trim();
					}
					data.push(record);
				}

				that.getView().getModel("objectView").setProperty("/toppings", data);
			};
			debugger;
			//File Reader will start reading the file
			reader.readAsBinaryString(file);

		},
		createColumnConfig: function() {
			var aCols = [];

			aCols.push({
				label: 'Topping Name',
				type: 'string',
				property: 'ToppingName'
			});

			aCols.push({
				property: 'Brand',
				type: 'string'
			});

			aCols.push({
				property: 'Price',
				type: 'number',
				scale: '0'
			});

			return aCols;
		},
		onDataExportXLS: function(){
			
			var aBoundProperties, aCols, oProperties, oRowBinding, oSettings, oTable, oController;

			oController = this;
			aCols = this.createColumnConfig();
			var modelData = this.getView().getModel("objectView").getProperty("/toppings");
			oSettings = {
				workbook: { columns: aCols },
				dataSource: modelData
			};

			new Spreadsheet(oSettings).build();
				
		},
		onDataExport: sap.m.Table.prototype.exportData || function(oEvent) {

			var oExport = new Export({
				// Type that will be used to generate the content. Own ExportType's can be created to support other formats
				exportType : new ExportTypeCSV({
					separatorChar : ",",
					charset: "urf-8"
				}),
				// Pass in the model created above
				models : this.getView().getModel("objectView"),
    			// binding information for the rows aggregation
				rows : {
					path : "/toppings"
				},
				// column definitions with column name and binding info for the content
				columns : [{
					name : "ToppingName",
					template : {
						content : "{ToppingName}"
					}
				}, {
					name : "Brand Name",
					template : {
						content : "{Brand}"
					}
				}, {
					name : "Price",
					template : {
						content : "{Price}"
					}
				}]
			});

			// download exported file
			oExport.saveFile().catch(function(oError) {
				sap.m.MessageBox.error("Error when downloading data. Browser might not be supported!\n\n" + oError);
			}).then(function() {
				oExport.destroy();
			});
		},
		takePhoto: function() {
			//This code was generated by the layout editor.
			var that = this;
			//Step 1: Create a popup object as a global variable
			this.fixedDialog = new Dialog({
				title: "Click on Capture to take photo",
				beginButton: new sap.m.Button({
					text: "Capture Photo",
					press: function(oEvent) {
						// TO DO: get the object of our video player which live camera stream is running
						//take the image object out of it and set to main page using global variable
						that.imageVal = document.getElementById("player");
						var oPopup = oEvent.getSource();
						that.attachName = oPopup.getParent().getContent()[1].getValue();
						that.fixedDialog.close();
					}
				}),
				content: [
					new sap.ui.core.HTML({
						content: "<video id='player' autoplay></video>"
					}),
					new sap.m.Input({
						placeholder: 'please enter image name here',
						required: true
					})
				],
				endButton: new sap.m.Button({
					text: "Cancel",
					press: function() {
						that.fixedDialog.close();
					}
				})
			});

			this.getView().addDependent(this.fixedDialog);
			//Step 2: Launch the popup
			this.fixedDialog.open();

			this.fixedDialog.attachBeforeClose(this.setImage, this);

			var handleSuccess = function(stream) {
				player.srcObject = stream;
			}

			navigator.mediaDevices.getUserMedia({
				video: true
			}).then(handleSuccess);

		},

		onUpload: function(oEvent) {
			var oFileUplaoder = this.getView().byId("imageUploader");
			var domRef = oFileUplaoder.getFocusDomRef();
			var file = domRef.files[0];
			var that = this;
			this.fileName = file.name;
			this.fileType = file.type;
			var reader = new FileReader();
			reader.onload = function(e) {
				//get an access to the content of the file
				var vContent = e.currentTarget.result.replace("data:image/jpeg;base64,", "");
				that.postImageToBackend("", that.fileName, that.fileType, vContent);
			};
			//File Reader will start reading the file
			reader.readAsDataURL(file);
		},

		setImage: function() {
			//Take the running image from the video stream of camera
			var oVBox = this.getView().byId("wow");
			var items = oVBox.getItems();
			var snapId = 'anubhav-' + items.length;
			var textId = snapId + '-text';
			var imageVal = this.imageVal;

			//set that as a canvas element on HTML page
			var oCanvas = new sap.ui.core.HTML({
				content: "<canvas id='" + snapId + "' width='320px' height='320px' " +
					" style='2px solid red'></canvas> " +
					" <label id='" + textId + "'>" + this.attachName + "</label>"
			});
			oVBox.addItem(oCanvas);
			oCanvas.addEventDelegate({
				onAfterRendering: function() {
					var snapShotCanvas = document.getElementById(snapId);
					var oContext = snapShotCanvas.getContext('2d');
					oContext.drawImage(imageVal, 0, 0, snapShotCanvas.width, snapShotCanvas.height);
				}
			});

		},
		sendToSAP: function() {
			var snapId = 'anubhav-0';

			this.postImageToBackend(this.productId,
				this.attachName,
				"jpeg",
				document.getElementById(snapId).toDataURL().replace("data:image/png;base64,", "")
			);
		},

		postImageToBackend: function(productId, fileName, fileType, Content) {

			var oDataModel = this.getView().getModel();

			if (productId === "") {
				productId = this.productId;
			}

			var payload = {
				"ProductId": productId,
				"Content": btoa(encodeURI(Content)),
				"Filename": fileName,
				"Filetype": fileType
			};

			oDataModel.create("/ProductAttachmentSet", payload, {
				sucess: function() {
					sap.m.MessageToast.show("Wow!! Picture updated to SAP system");
				},
				error: function(oerr) {
					//console.log(oerr);

				}
			});

		},

		_onBindingChange: function() {
			var oView = this.getView(),
				oViewModel = this.getModel("objectView"),
				oElementBinding = oView.getElementBinding();
			// No data for the binding
			if (!oElementBinding.getBoundContext()) {
				this.getRouter().getTargets().display("objectNotFound");
				return;
			}
			var oResourceBundle = this.getResourceBundle(),
				oObject = oView.getBindingContext().getObject(),
				sObjectId = oObject.ProductId,
				sObjectName = oObject.Name;
			// Everything went fine.
			oViewModel.setProperty("/busy", false);
			oViewModel.setProperty("/saveAsTileTitle", oResourceBundle.getText("saveAsTileTitle", [sObjectName]));
			oViewModel.setProperty("/shareOnJamTitle", sObjectName);
			oViewModel.setProperty("/shareSendEmailSubject", oResourceBundle.getText("shareSendEmailObjectSubject", [sObjectId]));
			oViewModel.setProperty("/shareSendEmailMessage", oResourceBundle.getText("shareSendEmailObjectMessage", [
				sObjectName,
				sObjectId,
				location.href
			]));
		}
	});
});